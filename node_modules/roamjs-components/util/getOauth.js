"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const queries_1 = require("../queries");
const localStorageGet_1 = tslib_1.__importDefault(require("./localStorageGet"));
const toConfigPageName_1 = tslib_1.__importDefault(require("./toConfigPageName"));
const toFlexRegex_1 = tslib_1.__importDefault(require("./toFlexRegex"));
const getOauth = (service, label) => {
    const fromStorage = (0, localStorageGet_1.default)(`oauth-${service}`);
    if (fromStorage) {
        const accounts = JSON.parse(fromStorage);
        const accountNode = (label ? accounts.find(({ text }) => text === label) : accounts[0]) ||
            {};
        const { data } = accountNode, node = tslib_1.__rest(accountNode, ["data"]);
        return data ? JSON.stringify(Object.assign(Object.assign({}, JSON.parse(data)), { node })) : "{}";
    }
    const tree = (0, queries_1.getShallowTreeByParentUid)((0, queries_1.getPageUidByPageTitle)((0, toConfigPageName_1.default)(service)));
    const node = tree.find((s) => (0, toFlexRegex_1.default)("oauth").test(s.text.trim()));
    if (!node) {
        return "{}";
    }
    const nodeChildren = (0, queries_1.getShallowTreeByParentUid)(node.uid);
    const index = label
        ? nodeChildren.findIndex((t) => (0, toFlexRegex_1.default)(label).test(t.text))
        : 0;
    const labelNode = nodeChildren[index];
    if (!labelNode) {
        return "{}";
    }
    if (labelNode.text.startsWith("{") && labelNode.text.endsWith("}")) {
        const obj = JSON.parse(labelNode.text);
        obj.node = {
            uid: labelNode.uid,
            time: (0, queries_1.getEditTimeByBlockUid)(labelNode.uid),
        };
        return JSON.stringify(obj);
    }
    const dataNode = (0, queries_1.getShallowTreeByParentUid)(labelNode.uid)[0];
    const uid = (dataNode === null || dataNode === void 0 ? void 0 : dataNode.uid) || "";
    if (!(dataNode === null || dataNode === void 0 ? void 0 : dataNode.text)) {
        return "{}";
    }
    const obj = JSON.parse(dataNode.text);
    obj.node = {
        uid,
        time: uid ? (0, queries_1.getEditTimeByBlockUid)(uid) : 0,
    };
    return JSON.stringify(obj);
};
exports.default = getOauth;
//# sourceMappingURL=getOauth.js.map
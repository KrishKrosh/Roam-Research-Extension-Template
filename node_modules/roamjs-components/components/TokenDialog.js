"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkRoamJSTokenWarning = exports.addTokenDialogCommand = exports.render = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@blueprintjs/core");
const react_1 = tslib_1.__importStar(require("react"));
const createOverlayRender_1 = tslib_1.__importDefault(require("../util/createOverlayRender"));
const setInputSetting_1 = tslib_1.__importDefault(require("../util/setInputSetting"));
const getToken_1 = tslib_1.__importDefault(require("../util/getToken"));
const queries_1 = require("../queries");
const localStorageRemove_1 = tslib_1.__importDefault(require("../util/localStorageRemove"));
const localStorageSet_1 = tslib_1.__importDefault(require("../util/localStorageSet"));
const writes_1 = require("../writes");
const axios_1 = tslib_1.__importDefault(require("axios"));
const SimpleAlert_1 = require("../components/SimpleAlert");
const getCurrentUserEmail_1 = tslib_1.__importDefault(require("../queries/getCurrentUserEmail"));
const TokenDialog = ({ onClose, onEnter }) => {
    const [token, setToken] = (0, react_1.useState)(getToken_1.default);
    const [useLocal, setUseLocal] = (0, react_1.useState)(true);
    const dialogOnClose = (0, react_1.useCallback)(() => {
        onClose();
        onEnter === null || onEnter === void 0 ? void 0 : onEnter("");
    }, [onClose, onEnter]);
    const onSubmit = (0, react_1.useCallback)(() => {
        const pageUid = (0, queries_1.getPageUidByPageTitle)("roam/js/roamjs");
        return (pageUid
            ? Promise.resolve(pageUid)
            : (0, writes_1.createPage)({ title: "roam/js/roamjs", tree: [{ text: "token" }] })).then(() => {
            if (useLocal) {
                (0, localStorageSet_1.default)(`token`, token);
                (0, setInputSetting_1.default)({
                    blockUid: pageUid,
                    key: "token",
                    value: "",
                });
            }
            else {
                (0, localStorageRemove_1.default)(`token`);
                (0, setInputSetting_1.default)({
                    blockUid: pageUid,
                    key: "token",
                    value: token,
                });
            }
            onClose();
            onEnter === null || onEnter === void 0 ? void 0 : onEnter(token);
        });
    }, [token, useLocal, onClose]);
    const onKeyDown = (0, react_1.useCallback)((e) => {
        if (e.key === "Enter" &&
            !e.shiftKey &&
            !e.altKey &&
            !e.metaKey &&
            !e.ctrlKey &&
            token) {
            onSubmit();
        }
    }, [onSubmit, token]);
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(core_1.Dialog, { isOpen: true, title: `Add RoamJS Token`, onClose: dialogOnClose, isCloseButtonShown: true, canOutsideClickClose: true, canEscapeKeyClose: true },
            react_1.default.createElement("div", { className: core_1.Classes.DIALOG_BODY, onKeyDown: (e) => e.stopPropagation() },
                react_1.default.createElement(core_1.Label, null,
                    "RoamJS Token",
                    react_1.default.createElement(core_1.InputGroup, { value: token, onChange: (e) => setToken(e.target.value), onKeyDown: onKeyDown, type: "password" })),
                react_1.default.createElement(core_1.Checkbox, { label: "Store Locally", checked: useLocal, onChange: (e) => setUseLocal(e.target.checked) })),
            react_1.default.createElement("div", { className: core_1.Classes.DIALOG_FOOTER },
                react_1.default.createElement("div", { className: core_1.Classes.DIALOG_FOOTER_ACTIONS },
                    react_1.default.createElement(core_1.Button, { text: "Cancel", onClick: dialogOnClose }),
                    react_1.default.createElement(core_1.Button, { text: "Save", intent: core_1.Intent.PRIMARY, onClick: onSubmit }))))));
};
exports.render = (0, createOverlayRender_1.default)("token-dialog", TokenDialog);
const addTokenDialogCommand = (props = {}) => window.roamAlphaAPI.ui.commandPalette.addCommand({
    label: "Set RoamJS Token",
    callback: () => (0, exports.render)(props),
});
exports.addTokenDialogCommand = addTokenDialogCommand;
const checkRoamJSTokenWarning = () => {
    const token = (0, getToken_1.default)();
    if (!token) {
        return new Promise((resolve) => axios_1.default
            .post(`https://lambda.roamjs.com/users`, {
            email: (0, getCurrentUserEmail_1.default)(),
        })
            .then((r) => {
            return (0, SimpleAlert_1.render)({
                content: `You need to ${r.data.exists
                    ? ""
                    : "sign up at [https://roamjs.com/signup](https://roamjs.com/signup) and "}add your RoamJS token to Roam to use this extension. You will only need to do this once per graph as this token will authorize you for all premium extensions.\n\nGrab your token from [https://roamjs.com/user/#Extensions](https://roamjs.com/user/#Extensions).`,
                onConfirm: () => (0, exports.render)({ onEnter: resolve }),
                onCancel: () => resolve(""),
                externalLink: true,
            });
        }));
    }
    else {
        return Promise.resolve(token);
    }
};
exports.checkRoamJSTokenWarning = checkRoamJSTokenWarning;
exports.default = TokenDialog;
//# sourceMappingURL=TokenDialog.js.map
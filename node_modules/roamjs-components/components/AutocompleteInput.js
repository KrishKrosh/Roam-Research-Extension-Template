"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@blueprintjs/core");
const react_1 = tslib_1.__importStar(require("react"));
const useArrowKeyDown_1 = tslib_1.__importDefault(require("../hooks/useArrowKeyDown"));
const fuzzy_1 = tslib_1.__importDefault(require("fuzzy"));
const AutocompleteInput = ({ value, setValue, onBlur, onConfirm, showButton, options = [], placeholder = "Enter value", }) => {
    const [isOpen, setIsOpen] = (0, react_1.useState)(false);
    const open = (0, react_1.useCallback)(() => setIsOpen(true), [setIsOpen]);
    const close = (0, react_1.useCallback)(() => setIsOpen(false), [setIsOpen]);
    const [isTyping, setIsTyping] = (0, react_1.useState)(false);
    const items = (0, react_1.useMemo)(() => value
        ? fuzzy_1.default
            .filter(value, options)
            .slice(0, 9)
            .map((e) => e.string)
        : [], [value, options]);
    const inputRef = (0, react_1.useRef)(null);
    const onEnter = (0, react_1.useCallback)((value) => {
        if (isOpen) {
            setValue(value);
            setIsTyping(false);
        }
        else if (onConfirm) {
            onConfirm();
        }
    }, [setValue, close, onConfirm, isOpen]);
    const { activeIndex, onKeyDown } = (0, useArrowKeyDown_1.default)({
        onEnter,
        results: items,
    });
    (0, react_1.useEffect)(() => {
        if (!items.length || !isTyping)
            close();
        else
            open();
    }, [items, close, isTyping]);
    return (react_1.default.createElement(core_1.Popover, { portalClassName: "roamjs-autocomplete-input", targetClassName: "roamjs-autocomplete-input-target", captureDismiss: true, isOpen: isOpen, onOpened: open, minimal: true, autoFocus: false, enforceFocus: false, position: core_1.PopoverPosition.BOTTOM_LEFT, modifiers: {
            flip: { enabled: false },
            preventOverflow: { enabled: false },
        }, content: react_1.default.createElement(core_1.Menu, { style: { maxWidth: 400 } }, items.map((t, i) => (react_1.default.createElement(core_1.MenuItem, { text: t, active: activeIndex === i, key: i, multiline: true, onClick: () => {
                var _a;
                setIsTyping(false);
                setValue(items[i]);
                (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();
            } })))), target: react_1.default.createElement(core_1.InputGroup, Object.assign({ value: value || "", onChange: (e) => {
                setIsTyping(true);
                setValue(e.target.value);
            }, placeholder: placeholder, autoFocus: true, onKeyDown: (e) => {
                if (e.key === "Escape") {
                    e.stopPropagation();
                    close();
                }
                else {
                    onKeyDown(e);
                }
            }, onBlur: (e) => {
                var _a, _b;
                if (e.relatedTarget &&
                    !((_b = (_a = e.relatedTarget).closest) === null || _b === void 0 ? void 0 : _b.call(_a, ".roamjs-autocomplete-input"))) {
                    close();
                }
                if (onBlur) {
                    onBlur(e.target.value);
                }
            }, inputRef: inputRef }, (showButton
            ? {
                rightElement: react_1.default.createElement(core_1.Button, { icon: "add", minimal: true, onClick: onEnter }),
            }
            : {}))) }));
};
exports.default = AutocompleteInput;
//# sourceMappingURL=AutocompleteInput.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.render = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importStar(require("react"));
const core_1 = require("@blueprintjs/core");
const createOverlayRender_1 = tslib_1.__importDefault(require("../util/createOverlayRender"));
const markdown_to_jsx_1 = tslib_1.__importDefault(require("markdown-to-jsx"));
const createBlock_1 = tslib_1.__importDefault(require("../writes/createBlock"));
const SimpleAlert = ({ onClose, content, onConfirm, onCancel, externalLink, confirmText = "Ok", dontShowAgain, }) => {
    const alertOnClose = (0, react_1.useCallback)((confirmed) => {
        onClose();
        if (!confirmed)
            onCancel === null || onCancel === void 0 ? void 0 : onCancel();
    }, [onCancel, onClose]);
    const cancelProps = onCancel
        ? {
            cancelButtonText: "Cancel",
            canOutsideClickCancel: true,
            canEscapeKeyCancel: true,
        }
        : {};
    const [checked, setChecked] = (0, react_1.useState)(false);
    const alerOnConfirm = (0, react_1.useCallback)(() => {
        (checked && dontShowAgain
            ? (0, createBlock_1.default)({
                parentUid: dontShowAgain,
                node: { text: "Do not show again" },
            })
            : Promise.resolve()).then(onConfirm);
    }, [onConfirm, checked, dontShowAgain]);
    return (react_1.default.createElement(core_1.Alert, Object.assign({ isOpen: true, onClose: alertOnClose, onConfirm: alerOnConfirm, confirmButtonText: confirmText }, cancelProps),
        react_1.default.createElement("div", { className: core_1.Classes.ALERT_CONTENTS, style: { whiteSpace: "pre-wrap" } },
            react_1.default.createElement(markdown_to_jsx_1.default, { options: {
                    overrides: {
                        a: {
                            props: externalLink
                                ? {
                                    target: "_blank",
                                    rel: "nooperner",
                                }
                                : {},
                        },
                    },
                } }, content),
            dontShowAgain && (react_1.default.createElement(core_1.Checkbox, { checked: checked, label: "Don't show again", onChange: (e) => setChecked(e.target.checked) })))));
};
exports.render = (0, createOverlayRender_1.default)("simple-alert", SimpleAlert);
exports.default = SimpleAlert;
//# sourceMappingURL=SimpleAlert.js.map
import React from "react";
import type { InputTextNode } from "../types";
import { ExternalLoginOptions } from "./ExternalLogin";
declare type TextField = {
    type: "text";
    defaultValue?: string;
};
declare type TimeField = {
    type: "time";
    defaultValue?: Date;
};
declare type NumberField = {
    type: "number";
    defaultValue?: number;
};
declare type FlagField = {
    type: "flag";
    defaultValue?: boolean;
    options?: {
        onChange?: (f: boolean) => void;
    };
};
declare type MultiTextField = {
    type: "multitext";
    defaultValue?: string[];
};
declare type PagesField = {
    type: "pages";
    defaultValue?: string[];
};
declare type OauthField = {
    type: "oauth";
    defaultValue?: [];
    options: ExternalLoginOptions;
};
declare type SelectField = {
    type: "select";
    defaultValue?: string;
    options: {
        items: string[] | (() => string[]);
    };
};
declare type BlockField = {
    type: "block";
    defaultValue?: InputTextNode;
};
declare type BlocksField = {
    type: "blocks";
    defaultValue?: InputTextNode[];
};
declare type CustomField = {
    type: "custom";
    defaultValue?: InputTextNode[];
    options: {
        component: React.FC<{
            parentUid: string;
            uid: string;
            defaultValue: InputTextNode[];
            title: string;
        }>;
    };
};
declare type ArrayField = PagesField | MultiTextField | CustomField | BlocksField;
declare type UnionField = ArrayField | TextField | TimeField | NumberField | OauthField | FlagField | SelectField | BlockField;
declare type Field<T extends UnionField> = T & {
    title: string;
    description: string;
};
declare type ConfigTab = {
    id: string;
    toggleable?: boolean | "premium";
    onEnable?: () => void;
    onDisable?: () => void;
    development?: boolean;
    fields: Field<UnionField>[];
};
declare type Config = {
    tabs: ConfigTab[];
    versioning?: boolean;
    brand?: string;
};
declare const ConfigPage: ({ id, config, pageUid, }: {
    id: string;
    config: Config;
    pageUid: string;
}) => React.ReactElement;
export declare const render: ({ h, title, pageUid, config, }: {
    h: HTMLHeadingElement;
    title: string;
    pageUid?: string | undefined;
    config: Config;
}) => void;
export declare const createConfigObserver: ({ title, config, }: {
    title: string;
    config: Config;
}) => Promise<{
    pageUid: string;
}>;
export default ConfigPage;

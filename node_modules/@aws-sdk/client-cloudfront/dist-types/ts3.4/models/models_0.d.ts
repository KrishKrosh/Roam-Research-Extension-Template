import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { CloudFrontServiceException as __BaseException } from "./CloudFrontServiceException";
export declare enum ResponseHeadersPolicyAccessControlAllowMethodsValues {
    ALL = "ALL",
    DELETE = "DELETE",
    GET = "GET",
    HEAD = "HEAD",
    OPTIONS = "OPTIONS",
    PATCH = "PATCH",
    POST = "POST",
    PUT = "PUT"
}

export declare class AccessDenied extends __BaseException {
    readonly name: "AccessDenied";
    readonly $fault: "client";
    Message?: string;
    
    constructor(opts: __ExceptionOptionType<AccessDenied, __BaseException>);
}

export interface KeyPairIds {
    
    Quantity: number | undefined;
    
    Items?: string[];
}
export declare namespace KeyPairIds {
    
    const filterSensitiveLog: (obj: KeyPairIds) => any;
}

export interface KGKeyPairIds {
    
    KeyGroupId?: string;
    
    KeyPairIds?: KeyPairIds;
}
export declare namespace KGKeyPairIds {
    
    const filterSensitiveLog: (obj: KGKeyPairIds) => any;
}

export interface ActiveTrustedKeyGroups {
    
    Enabled: boolean | undefined;
    
    Quantity: number | undefined;
    
    Items?: KGKeyPairIds[];
}
export declare namespace ActiveTrustedKeyGroups {
    
    const filterSensitiveLog: (obj: ActiveTrustedKeyGroups) => any;
}

export interface Signer {
    
    AwsAccountNumber?: string;
    
    KeyPairIds?: KeyPairIds;
}
export declare namespace Signer {
    
    const filterSensitiveLog: (obj: Signer) => any;
}

export interface ActiveTrustedSigners {
    
    Enabled: boolean | undefined;
    
    Quantity: number | undefined;
    
    Items?: Signer[];
}
export declare namespace ActiveTrustedSigners {
    
    const filterSensitiveLog: (obj: ActiveTrustedSigners) => any;
}

export interface Aliases {
    
    Quantity: number | undefined;
    
    Items?: string[];
}
export declare namespace Aliases {
    
    const filterSensitiveLog: (obj: Aliases) => any;
}
export declare type ICPRecordalStatus = "APPROVED" | "PENDING" | "SUSPENDED";

export interface AliasICPRecordal {
    
    CNAME?: string;
    
    ICPRecordalStatus?: ICPRecordalStatus | string;
}
export declare namespace AliasICPRecordal {
    
    const filterSensitiveLog: (obj: AliasICPRecordal) => any;
}
export declare type Method = "DELETE" | "GET" | "HEAD" | "OPTIONS" | "PATCH" | "POST" | "PUT";

export interface CachedMethods {
    
    Quantity: number | undefined;
    
    Items: (Method | string)[] | undefined;
}
export declare namespace CachedMethods {
    
    const filterSensitiveLog: (obj: CachedMethods) => any;
}

export interface AllowedMethods {
    
    Quantity: number | undefined;
    
    Items: (Method | string)[] | undefined;
    
    CachedMethods?: CachedMethods;
}
export declare namespace AllowedMethods {
    
    const filterSensitiveLog: (obj: AllowedMethods) => any;
}
export interface AssociateAliasRequest {
    
    TargetDistributionId: string | undefined;
    
    Alias: string | undefined;
}
export declare namespace AssociateAliasRequest {
    
    const filterSensitiveLog: (obj: AssociateAliasRequest) => any;
}

export declare class IllegalUpdate extends __BaseException {
    readonly name: "IllegalUpdate";
    readonly $fault: "client";
    Message?: string;
    
    constructor(opts: __ExceptionOptionType<IllegalUpdate, __BaseException>);
}

export declare class InvalidArgument extends __BaseException {
    readonly name: "InvalidArgument";
    readonly $fault: "client";
    Message?: string;
    
    constructor(opts: __ExceptionOptionType<InvalidArgument, __BaseException>);
}

export declare class NoSuchDistribution extends __BaseException {
    readonly name: "NoSuchDistribution";
    readonly $fault: "client";
    Message?: string;
    
    constructor(opts: __ExceptionOptionType<NoSuchDistribution, __BaseException>);
}

export declare class TooManyDistributionCNAMEs extends __BaseException {
    readonly name: "TooManyDistributionCNAMEs";
    readonly $fault: "client";
    Message?: string;
    
    constructor(opts: __ExceptionOptionType<TooManyDistributionCNAMEs, __BaseException>);
}

export declare class BatchTooLarge extends __BaseException {
    readonly name: "BatchTooLarge";
    readonly $fault: "client";
    Message?: string;
    
    constructor(opts: __ExceptionOptionType<BatchTooLarge, __BaseException>);
}
export declare type ItemSelection = "all" | "none" | "whitelist";

export interface CookieNames {
    
    Quantity: number | undefined;
    
    Items?: string[];
}
export declare namespace CookieNames {
    
    const filterSensitiveLog: (obj: CookieNames) => any;
}

export interface CookiePreference {
    
    Forward: ItemSelection | string | undefined;
    
    WhitelistedNames?: CookieNames;
}
export declare namespace CookiePreference {
    
    const filterSensitiveLog: (obj: CookiePreference) => any;
}

export interface Headers {
    
    Quantity: number | undefined;
    
    Items?: string[];
}
export declare namespace Headers {
    
    const filterSensitiveLog: (obj: Headers) => any;
}

export interface QueryStringCacheKeys {
    
    Quantity: number | undefined;
    
    Items?: string[];
}
export declare namespace QueryStringCacheKeys {
    
    const filterSensitiveLog: (obj: QueryStringCacheKeys) => any;
}

export interface ForwardedValues {
    
    QueryString: boolean | undefined;
    
    Cookies: CookiePreference | undefined;
    
    Headers?: Headers;
    
    QueryStringCacheKeys?: QueryStringCacheKeys;
}
export declare namespace ForwardedValues {
    
    const filterSensitiveLog: (obj: ForwardedValues) => any;
}
export declare type EventType = "origin-request" | "origin-response" | "viewer-request" | "viewer-response";

export interface FunctionAssociation {
    
    FunctionARN: string | undefined;
    
    EventType: EventType | string | undefined;
}
export declare namespace FunctionAssociation {
    
    const filterSensitiveLog: (obj: FunctionAssociation) => any;
}

export interface FunctionAssociations {
    
    Quantity: number | undefined;
    
    Items?: FunctionAssociation[];
}
export declare namespace FunctionAssociations {
    
    const filterSensitiveLog: (obj: FunctionAssociations) => any;
}

export interface LambdaFunctionAssociation {
    
    LambdaFunctionARN: string | undefined;
    
    EventType: EventType | string | undefined;
    
    IncludeBody?: boolean;
}
export declare namespace LambdaFunctionAssociation {
    
    const filterSensitiveLog: (obj: LambdaFunctionAssociation) => any;
}

export interface LambdaFunctionAssociations {
    
    Quantity: number | undefined;
    
    Items?: LambdaFunctionAssociation[];
}
export declare namespace LambdaFunctionAssociations {
    
    const filterSensitiveLog: (obj: LambdaFunctionAssociations) => any;
}

export interface TrustedKeyGroups {
    
    Enabled: boolean | undefined;
    
    Quantity: number | undefined;
    
    Items?: string[];
}
export declare namespace TrustedKeyGroups {
    
    const filterSensitiveLog: (obj: TrustedKeyGroups) => any;
}

export interface TrustedSigners {
    
    Enabled: boolean | undefined;
    
    Quantity: number | undefined;
    
    Items?: string[];
}
export declare namespace TrustedSigners {
    
    const filterSensitiveLog: (obj: TrustedSigners) => any;
}
export declare type ViewerProtocolPolicy = "allow-all" | "https-only" | "redirect-to-https";

export interface CacheBehavior {
    